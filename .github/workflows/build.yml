# .github/workflows/build.yml
name: Build & Package

on:
  workflow_dispatch:

jobs:
  # JOB 1: NATIVE x86_64 BUILD
  build_x86_64:
    name: Build & Package for x86_64
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Define Paths & Create Package Directory
        id: dirs
        run: |
          echo "build-dir=${{ github.workspace }}/build-x86_64" >> "$GITHUB_OUTPUT"
          echo "package-dir=${{ github.workspace }}/packages-x86_64" >> "$GITHUB_OUTPUT"
          mkdir -p ${{ steps.dirs.outputs.package-dir }}
      - name: Install Dependencies
        run: sudo apt-get update && sudo apt-get install -y --no-install-recommends build-essential cmake pkg-config rpm libfuse2 libgl-dev qt6-base-dev libopencv-dev libavformat-dev libavcodec-dev libavutil-dev libswscale-dev
      - name: Configure and Build
        run: |
          cmake -S QtProject_Linux -B ${{ steps.dirs.outputs.build-dir }} -DCMAKE_BUILD_TYPE=Release -DCPACK_OUTPUT_FILE_PREFIX=${{ steps.dirs.outputs.package-dir }}
          cmake --build ${{ steps.dirs.outputs.build-dir }}
      - name: Generate DEB and RPM
        run: cpack --config ${{ steps.dirs.outputs.build-dir }}/CPackConfig.cmake
      - name: Copy Assets for AppImage/Portable
        run: |
          cp QtProject_Linux/usr/share/applications/video-simili-duplicate-cleaner.desktop ${{ steps.dirs.outputs.build-dir }}/
          cp QtProject_Linux/usr/share/icons/hicolor/256x256/apps/video-simili-duplicate-cleaner.png ${{ steps.dirs.outputs.build-dir }}/
      - name: Generate AppImage & Portable Archive
        run: |
          wget -q https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage
          chmod a+x linuxdeployqt-continuous-x86_64.AppImage
          ./linuxdeployqt-continuous-x86_64.AppImage ${{ steps.dirs.outputs.build-dir }}/video-simili-duplicate-cleaner -appimage -qmake=/usr/lib/qt6/bin/qmake
          mv Video_Simili_Duplicate_Cleaner-*.AppImage ${{ steps.dirs.outputs.package-dir }}/
          ./linuxdeployqt-continuous-x86_64.AppImage ${{ steps.dirs.outputs.build-dir }}/video-simili-duplicate-cleaner -bundle-non-qt-libs
          mv Video_Simili_Duplicate_Cleaner-*-x86_64.tar.gz ${{ steps.dirs.outputs.package-dir }}/
      - name: Generate Arch Package (x86_64)
        run: |
          docker run --rm -v ${{ github.workspace }}:/ws:rw --platform linux/amd64 archlinux:latest /bin/bash -c "
            set -e && pacman-key --init && pacman-key --populate && pacman -Syu --noconfirm --needed base-devel cmake git qt6-base opencv ffmpeg
            cd /ws/QtProject_Linux && useradd builder -m && chown -R builder:builder /ws
            sudo -u builder makepkg -sf --noconfirm
            find . -maxdepth 1 -name '*.pkg.tar.zst' -exec mv {} /ws/packages-x86_64/ \;
          "
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages-x86_64
          path: ${{ steps.dirs.outputs.package-dir }}

 # JOB 2: AARCH64 BUILD
  build_aarch64:
    name: Build & Package for aarch64
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Package Directory
        run: mkdir -p ${{ github.workspace }}/packages-aarch64
      - name: Build DEB, RPM, AppImage, Portable (in Ubuntu container)
        run: |
          docker run --rm -v ${{ github.workspace }}:/ws:rw --platform linux/arm64 ubuntu:22.04 /bin/bash -c "
            set -e && export DEBIAN_FRONTEND=noninteractive
            apt-get update && apt-get install -y --no-install-recommends build-essential cmake pkg-config rpm qt6-base-dev libopencv-dev libavformat-dev libavcodec-dev libavutil-dev libswscale-dev libgl-dev wget libfuse2
            cmake -S /ws/QtProject_Linux -B /ws/build-aarch64 -DCMAKE_BUILD_TYPE=Release -DCPACK_OUTPUT_FILE_PREFIX=/ws/packages-aarch64
            cmake --build /ws/build-aarch64 && cpack --config /ws/build-aarch64/CPackConfig.cmake
            cp /ws/QtProject_Linux/usr/share/applications/video-simili-duplicate-cleaner.desktop /ws/build-aarch64/
            cp /ws/QtProject_Linux/usr/share/icons/hicolor/256x256/apps/video-simili-duplicate-cleaner.png /ws/build-aarch64/
            wget -q -P /ws/build-aarch64 https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-aarch64.AppImage && chmod a+x /ws/build-aarch64/linuxdeployqt-aarch64.AppImage
            /ws/build-aarch64/linuxdeployqt-aarch64.AppImage /ws/build-aarch64/video-simili-duplicate-cleaner -appimage -qmake=/usr/lib/aarch64-linux-gnu/qt6/bin/qmake
            mv /ws/build-aarch64/Video_Simili_Duplicate_Cleaner-*.AppImage /ws/packages-aarch64/
            /ws/build-aarch64/linuxdeployqt-aarch64.AppImage /ws/build-aarch64/video-simili-duplicate-cleaner -bundle-non-qt-libs
            mv /ws/build-aarch64/Video_Simili_Duplicate_Cleaner-*-aarch64.tar.gz /ws/packages-aarch64/
          "
      - name: Build Arch Package (in pre-built Arch container)
        run: |
          IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/vsdc-archlinux-arm-builder:latest"
          docker pull $IMAGE_NAME
          docker run --rm -v ${{ github.workspace }}:/ws:rw --platform linux/arm64 $IMAGE_NAME /bin/bash -c "
            set -e && cd /ws/QtProject_Linux && useradd builder -m && chown -R builder:builder /ws
            sudo -u builder makepkg -sf --noconfirm
            find . -maxdepth 1 -name '*.pkg.tar.zst' -exec mv {} /ws/packages-aarch64/ \;
          "
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages-aarch64
          path: packages-aarch64
