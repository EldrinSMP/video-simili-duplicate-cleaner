# .github/workflows/build.yml
name: Build & Package

on:
  workflow_dispatch:

# The single source of truth for version and name
env:
  CI_PACKAGE_VERSION: "1.13.0L-alpha"
  CI_PACKAGE_NAME: "video-simili-duplicate-cleaner"

jobs:
  # JOB 1: Non-Arch x86_64 Packages
  build_non_arch_x86_64:
    name: Build Non-Arch Packages (x86_64)
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Define Paths
        id: dirs
        run: |
          echo "build-dir=${{ github.workspace }}/build-x86_64" >> "$GITHUB_OUTPUT"
          echo "package-dir=${{ github.workspace }}/packages" >> "$GITHUB_OUTPUT"
          mkdir -p ${{ steps.dirs.outputs.package-dir }}
      - name: Install Dependencies
        run: sudo apt-get update && sudo apt-get install -y --no-install-recommends build-essential cmake pkg-config rpm libfuse2 libgl-dev qt6-base-dev libopencv-dev libavformat-dev libavcodec-dev libavutil-dev libswscale-dev
      - name: Configure and Build
        run: cmake -S QtProject_Linux -B ${{ steps.dirs.outputs.build-dir }} -DCMAKE_BUILD_TYPE=Release
      - name: Generate and Rename DEB/RPM
        run: |
          cpack --config ${{ steps.dirs.outputs.build-dir }}/CPackConfig.cmake
          mv *.deb ${{ steps.dirs.outputs.package-dir }}/${{ env.CI_PACKAGE_NAME }}-${{ env.CI_PACKAGE_VERSION }}-x86_64.deb
          mv *.rpm ${{ steps.dirs.outputs.package-dir }}/${{ env.CI_PACKAGE_NAME }}-${{ env.CI_PACKAGE_VERSION }}-x86_64.rpm
      - name: Generate AppImage & Portable Archive
        run: |
          wget -q https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage
          chmod a+x linuxdeployqt-continuous-x86_64.AppImage
          export PATH="/usr/lib/qt6/bin:$PATH"
          ./linuxdeployqt-continuous-x86_64.AppImage ${{ steps.dirs.outputs.build-dir }}/${{ env.CI_PACKAGE_NAME }} -appimage
          mv ${{ env.CI_PACKAGE_NAME }}-*.AppImage ${{ steps.dirs.outputs.package-dir }}/${{ env.CI_PACKAGE_NAME }}-${{ env.CI_PACKAGE_VERSION }}-x86_64.AppImage
          tar -czvf ${{ steps.dirs.outputs.package-dir }}/${{ env.CI_PACKAGE_NAME }}-${{ env.CI_PACKAGE_VERSION }}-x86_64-portable.tar.gz -C ${{ steps.dirs.outputs.build-dir }} .
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages-x86_64
          path: ${{ steps.dirs.outputs.package-dir }}

  # JOB 2: Non-Arch aarch64 Packages
  build_non_arch_aarch64:
    name: Build Non-Arch Packages (aarch64)
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - name: Create Package Directory
        run: mkdir -p ${{ github.workspace }}/packages
      - name: Build in Ubuntu Container
        run: |
          docker run --rm -v ${{ github.workspace }}:/ws:rw --platform linux/arm64 ubuntu:22.04 /bin/bash -c "
            set -e && export DEBIAN_FRONTEND=noninteractive
            apt-get update && apt-get install -y --no-install-recommends ca-certificates build-essential cmake pkg-config rpm qt6-base-dev libopencv-dev libavformat-dev libavcodec-dev libavutil-dev libswscale-dev libgl-dev wget libfuse2 git

            cmake -S /ws/QtProject_Linux -B /ws/build-aarch64 -DCMAKE_BUILD_TYPE=Release -DCI_PACKAGE_VERSION=${{ env.CI_PACKAGE_VERSION }} -DCPACK_PACKAGE_ARCHITECTURE=aarch64
            cpack --config /ws/build-aarch64/CPackConfig.cmake
            mv /ws/*.deb /ws/packages/${{ env.CI_PACKAGE_NAME }}-${{ env.CI_PACKAGE_VERSION }}-aarch64.deb
            mv /ws/*.rpm /ws/packages/${{ env.CI_PACKAGE_NAME }}-${{ env.CI_PACKAGE_VERSION }}-aarch64.rpm

            cd /ws/build-aarch64
            wget --show-progress --progress=bar:force:noscroll https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-aarch64.AppImage
            chmod a+x ./linuxdeployqt-continuous-aarch64.AppImage
            ./linuxdeployqt-continuous-aarch64.AppImage --appimage-extract
            export PATH=\"/usr/lib/aarch64-linux-gnu/qt6/bin:\$PATH\"
            
            ./squashfs-root/AppRun ./${{ env.CI_PACKAGE_NAME }} -appimage
            mv ${{ env.CI_PACKAGE_NAME }}-*.AppImage /ws/packages/${{ env.CI_PACKAGE_NAME }}-${{ env.CI_PACKAGE_VERSION }}-aarch64.AppImage
            tar -czvf /ws/packages/${{ env.CI_PACKAGE_NAME }}-${{ env.CI_PACKAGE_VERSION }}-aarch64-portable.tar.gz -C . .
          "
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages-aarch64
          path: packages

  # JOB 3 & 4: Arch Linux Packages (Matrix Build)
  build_arch:
    name: Build Arch Package (${{ matrix.arch }})
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        arch: [x86_64, aarch64]
    steps:
      - uses: actions/checkout@v4
      - if: matrix.arch == 'aarch64'
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - if: matrix.arch == 'aarch64'
        name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Package Directory
        run: mkdir -p ${{ github.workspace }}/packages
      - name: Determine Docker Image
        id: docker_image
        run: |
          if [ "${{ matrix.arch }}" = "aarch64" ]; then
            echo "IMAGE_NAME=$(echo "ghcr.io/${{ github.repository_owner }}/vsdc-archlinux-arm-builder:latest" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"
          else
            echo "IMAGE_NAME=archlinux:latest" >> "$GITHUB_OUTPUT"
          fi
      - name: Build in Container
        run: |
          docker pull --platform linux/${{ matrix.arch == 'x86_64' && 'amd64' || 'arm64' }} ${{ steps.docker_image.outputs.IMAGE_NAME }}
          docker run --rm -v ${{ github.workspace }}:/ws:rw \
            --platform linux/${{ matrix.arch == 'x86_64' && 'amd64' || 'arm64' }} \
            -e CI_PACKAGE_VERSION=${{ env.CI_PACKAGE_VERSION }} \
            -e CI_PACKAGE_NAME=${{ env.CI_PACKAGE_NAME }} \
            -e CI_PACKAGE_ARCH=${{ matrix.arch }} \
            ${{ steps.docker_image.outputs.IMAGE_NAME }} /bin/bash -c "
              set -e
              if [ \"${{ matrix.arch }}\" = \"x86_64\" ]; then
                pacman-key --init && pacman-key --populate && pacman -Syu --noconfirm --needed base-devel cmake git
              fi
              cd /ws/QtProject_Linux
              useradd builder -m && chown -R builder:builder /ws
              sudo -u builder PKGEXT='.pkg.tar.zst' makepkg -sf --noconfirm
              find . -maxdepth 1 -name \"*.pkg.tar.zst\" -exec mv {} /ws/packages/ \;
            "
      - name: Rename Arch Package
        run: |
          cd ${{ github.workspace }}/packages
          mv *.pkg.tar.zst ${{ env.CI_PACKAGE_NAME }}-${{ env.CI_PACKAGE_VERSION }}-${{ matrix.arch }}-arch.pkg.tar.zst
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages-arch-${{ matrix.arch }}
          path: ${{ github.workspace }}/packages
