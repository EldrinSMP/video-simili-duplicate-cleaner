# Workflow name
name: VSDC Linux Multi-Arch Build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build_and_package:
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64, aarch64]

    runs-on: ubuntu-22.04

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up QEMU
      if: matrix.arch == 'aarch64'
      uses: docker/setup-qemu-action@v3

    - name: Define Directory Paths
      id: dirs
      run: |
        echo "source-dir=${{ github.workspace }}/QtProject_Linux" >> "$GITHUB_OUTPUT"
        echo "build-dir=${{ github.workspace }}/QtProject_Linux/build/release" >> "$GITHUB_OUTPUT"
        echo "package-dir=${{ github.workspace }}/release-files" >> "$GITHUB_OUTPUT"

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          pkg-config \
          qt6-base-dev \
          libopencv-dev \
          libavformat-dev \
          libavcodec-dev \
          libavutil-dev \
          libswscale-dev \
          rpm \
          libgl-dev \
          libfuse2

    - name: Configure CMake
      run: |
        cmake -S ${{ steps.dirs.outputs.source-dir }} \
              -B ${{ steps.dirs.outputs.build-dir }} \
              -DCMAKE_BUILD_TYPE=Release \
              -DCPACK_OUTPUT_FILE_PREFIX=${{ steps.dirs.outputs.package-dir }}

    - name: Build Project
      run: cmake --build ${{ steps.dirs.outputs.build-dir }}

    - name: Generate DEB and RPM Packages
      working-directory: ${{ steps.dirs.outputs.build-dir }}
      run: cpack

    - name: Download linuxdeployqt
      run: |
        wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
        chmod a+x linuxdeployqt-continuous-x86_64.AppImage

    - name: Create Portable Bundle
      # This step correctly gathers all dependencies into the current (build) directory.
      working-directory: ${{ steps.dirs.outputs.build-dir }}
      run: |
        /home/runner/work/video-simili-duplicate-cleaner/video-simili-duplicate-cleaner/linuxdeployqt-continuous-x86_64.AppImage \
          ./video-simili-duplicate-cleaner \
          -bundle-non-qt-libs \
          -qmake=/usr/lib/qt6/bin/qmake

    # NEW, MORE RELIABLE APPROACH
    - name: Assemble Portable Directory and Archive
      # Run this from the build directory where all the assets are.
      working-directory: ${{ steps.dirs.outputs.build-dir }}
      run: |
        # 1. Create a clean directory for our portable bundle.
        mkdir VSDC_Portable

        # 2. Move all the deployed assets into our new directory.
        mv lib/ plugins/ doc/ qt.conf AppRun video-simili-duplicate-cleaner VSDC_Portable/

        # 3. Get the version string.
        VERSION=$(grep 'set(CPACK_PACKAGE_VERSION' ${{ steps.dirs.outputs.source-dir }}/CMakeLists.txt | sed -E 's/.*"(.+)".*/\1/')

        # 4. Create the final tar.gz archive from our clean directory.
        tar -czvf ${{ steps.dirs.outputs.package-dir }}/vsdc-portable-${VERSION}-${{ matrix.arch }}.tar.gz VSDC_Portable/

    - name: Create AppImage
      # Run this from the build directory as well.
      working-directory: ${{ steps.dirs.outputs.build-dir }}
      run: |
        # The AppImage tool should be pointed at the original binary.
        # It will find the dependencies we moved into VSDC_Portable automatically.
        /home/runner/work/video-simili-duplicate-cleaner/video-simili-duplicate-cleaner/linuxdeployqt-continuous-x86_64.AppImage \
          ./VSDC_Portable/video-simili-duplicate-cleaner \
          -appimage

    - name: Upload Packages to Release
      # This step only runs when you push a git tag.
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ${{ steps.dirs.outputs.package-dir }}/*.{deb,rpm,tar.gz}
          ${{ steps.dirs.outputs.build-dir }}/*.AppImage
