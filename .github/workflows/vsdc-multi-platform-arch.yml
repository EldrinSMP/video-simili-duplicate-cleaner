name: VSDC Linux Multi-Arch Build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  # JOB 1: NATIVE x86_64 BUILD
  build_x86_64:
    name: Build for x86_64
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Download linuxdeployqt
        run: |
          wget -q https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage
          chmod a+x linuxdeployqt-continuous-x86_64.AppImage
      - name: Define Paths
        id: dirs
        run: |
          echo "build-dir=${{ github.workspace }}/build-x86_64" >> "$GITHUB_OUTPUT"
          echo "package-dir=${{ github.workspace }}/packages-x86_64" >> "$GITHUB_OUTPUT"
      - name: Install Dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y --no-install-recommends \
            build-essential cmake pkg-config rpm libfuse2 libgl-dev \
            qt6-base-dev libopencv-dev libavformat-dev libavcodec-dev \
            libavutil-dev libswscale-dev
      - name: Configure and Build
        run: |
          cmake -S QtProject_Linux -B ${{ steps.dirs.outputs.build-dir }} \
            -DCMAKE_BUILD_TYPE=Release \
            -DCPACK_OUTPUT_FILE_PREFIX=${{ steps.dirs.outputs.package-dir }}
          cmake --build ${{ steps.dirs.outputs.build-dir }}
      - name: Generate Packages
        run: cpack --config ${{ steps.dirs.outputs.build-dir }}/CPackConfig.cmake
      - name: Create AppImage
        run: |
          ${{ github.workspace }}/linuxdeployqt-continuous-x86_64.AppImage \
            ${{ steps.dirs.outputs.build-dir }}/video-simili-duplicate-cleaner \
            -appimage \
            -qmake=/usr/lib/qt6/bin/qmake
          mv Video_Simili_Duplicate_Cleaner-*.AppImage ${{ steps.dirs.outputs.package-dir }}/
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages-x86_64
          path: ${{ steps.dirs.outputs.package-dir }}

  # JOB 2: CONTAINERIZED aarch64 BUILD
  build_aarch64:
    name: Build for aarch64
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Build and Package in ARM64 Container
        run: |
          docker run --rm -v ${{ github.workspace }}:/ws:rw --platform linux/arm64 \
            ubuntu:22.04 \
            /bin/bash -c " \
              set -e && export DEBIAN_FRONTEND=noninteractive && \
              apt-get update && apt-get install -y --no-install-recommends \
                build-essential cmake pkg-config rpm qt6-base-dev libopencv-dev \
                libavformat-dev libavcodec-dev libavutil-dev libswscale-dev libgl-dev && \
              cmake -S /ws/QtProject_Linux -B /ws/build-aarch64 \
                -DCMAKE_BUILD_TYPE=Release \
                -DCPACK_OUTPUT_FILE_PREFIX=/ws/packages-aarch64 && \
              cmake --build /ws/build-aarch64 && \
              cpack --config /ws/build-aarch64/CPackConfig.cmake \
            "
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages-aarch64
          path: packages-aarch64

  # JOB 3: CONTAINERIZED ARCH LINUX BUILDS
  build_arch:
    name: Build for Arch Linux (${{ matrix.arch }})
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        arch: [x86_64, aarch64]
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Build Arch Package in Container
        run: |
          PLATFORM="linux/${{ matrix.arch == 'x86_64' && 'amd64' || 'arm64' }}"
          IMAGE_NAME="archlinux:latest"
          if [ "${{ matrix.arch }}" = "aarch64" ]; then
            IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/vsdc-archlinux-arm:latest"
          fi
          docker run --rm -v ${{ github.workspace }}:/ws:rw --platform $PLATFORM \
            $IMAGE_NAME \
            /bin/bash -c " \
              set -e && \
              pacman-key --init && pacman-key --populate && \
              pacman -Syu --noconfirm base-devel cmake git qt6-base opencv ffmpeg && \
              cd /ws/QtProject_Linux && \
              useradd builder -m && chown -R builder:builder /ws && \
              sudo -u builder makepkg -sf --noconfirm && \
              find . -name '*.pkg.tar.zst' -exec mv {} /ws/packages-arch-${{ matrix.arch }}/ \; \
            "
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages-arch-${{ matrix.arch }}
          path: packages-arch-${{ matrix.arch }}

  # JOB 4: CREATE RELEASE
  release:
    name: Create Release
    needs: [build_x86_64, build_aarch64, build_arch]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/*/*
