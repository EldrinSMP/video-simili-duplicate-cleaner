# Workflow name
name: VSDC Linux Multi-Arch Build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build_and_package:
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64, aarch64]

    runs-on: ubuntu-22.04

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up QEMU
      if: matrix.arch == 'aarch64'
      uses: docker/setup-qemu-action@v3

    - name: Define Directory Paths
      id: dirs
      run: |
        echo "source-dir=${{ github.workspace }}/QtProject_Linux" >> "$GITHUB_OUTPUT"
        echo "build-dir=${{ github.workspace }}/QtProject_Linux/build/release" >> "$GITHUB_OUTPUT"
        echo "package-dir=${{ github.workspace }}/release-files" >> "$GITHUB_OUTPUT"

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          pkg-config \
          qt6-base-dev \
          libopencv-dev \
          libavformat-dev \
          libavcodec-dev \
          libavutil-dev \
          libswscale-dev \
          rpm \
          libgl-dev \
          libfuse2

    - name: Configure CMake
      run: |
        cmake -S ${{ steps.dirs.outputs.source-dir }} \
              -B ${{ steps.dirs.outputs.build-dir }} \
              -DCMAKE_BUILD_TYPE=Release \
              -DCPACK_OUTPUT_FILE_PREFIX=${{ steps.dirs.outputs.package-dir }}

    - name: Build Project
      run: cmake --build ${{ steps.dirs.outputs.build-dir }}

    - name: Generate DEB and RPM Packages
      working-directory: ${{ steps.dirs.outputs.build-dir }}
      run: cpack

    - name: Download linuxdeployqt
      run: |
        wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
        chmod a+x linuxdeployqt-continuous-x86_64.AppImage

    - name: Create Portable Bundle
      # Run this step from inside the build directory
      working-directory: ${{ steps.dirs.outputs.build-dir }}
      run: |
        # Now that we're in the build dir, we reference the linuxdeployqt tool
        # with an absolute path and the local app binary with a relative path.
        /home/runner/work/video-simili-duplicate-cleaner/video-simili-duplicate-cleaner/linuxdeployqt-continuous-x86_64.AppImage \
          ./video-simili-duplicate-cleaner \
          -bundle-non-qt-libs \
          -qmake=/usr/lib/qt6/bin/qmake

    - name: Archive the Portable Bundle
      # Also run this step from inside the build directory
      working-directory: ${{ steps.dirs.outputs.build-dir }}
      run: |
        # The VERSION command can stay the same, using an absolute path to the source
        VERSION=$(grep 'set(CPACK_PACKAGE_VERSION' ${{ steps.dirs.outputs.source-dir }}/CMakeLists.txt | sed -E 's/.*"(.+)".*/\1/')
        # The tar command now finds the AppDir in the current directory, and we use
        # an absolute path for the output file to guarantee it lands in the right place.
        tar -czvf ${{ steps.dirs.outputs.package-dir }}/vsdc-portable-${VERSION}-${{ matrix.arch }}.tar.gz ./*_x86_64.AppDir/

    - name: Create AppImage from the bundle
      # Finally, run this step from the build directory as well
      working-directory: ${{ steps.dirs.outputs.build-dir }}
      run: |
        # The AppImage tool will find the binary and the AppDir in the current folder.
        /home/runner/work/video-simili-duplicate-cleaner/video-simili-duplicate-cleaner/linuxdeployqt-continuous-x86_64.AppImage \
          ./video-simili-duplicate-cleaner \
          -appimage

    # This final upload step should now work correctly
    - name: Upload Packages and Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          ${{ steps.dirs.outputs.package-dir }}/*.{deb,rpm,tar.gz}
          ${{ steps.dirs.outputs.build-dir }}/*.AppImage
