# Workflow name
name: VSDC Linux Multi-Arch Build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  # JOB 1: NATIVE x86_64 BUILD (Unchanged)
  build_x86_64:
    # ... (this job remains exactly the same as the successful version) ...

  # JOB 2: CONTAINERIZED aarch64 BUILD (Unchanged)
  build_aarch64:
    # ... (this job also remains exactly the same) ...

  # JOB 3: CONTAINERIZED ARCH LINUX BUILDS (New Job)
  build_arch:
    name: Build for Arch Linux (${{ matrix.arch }})
    needs: [build_x86_64, build_aarch64] # Optional: run after other builds
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64, aarch64] # We will run for both architectures

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Arch Package in Container
        run: |
          # Set the correct Docker platform and image based on the matrix architecture
          if [ "${{ matrix.arch }}" = "aarch64" ]; then
            PLATFORM="linux/arm64"
            IMAGE="arm64v8/archlinux"
          else
            PLATFORM="linux/amd64"
            IMAGE="archlinux:latest"
          fi

          # Run the entire build process inside a clean Arch Linux container
          docker run --rm -v ${{ github.workspace }}:/ws:rw --platform $PLATFORM \
            $IMAGE \
            /bin/bash -c " \
              set -e && \
              echo '--- Installing Dependencies ---' && \
              pacman -Syu --noconfirm base-devel cmake git qt6-base opencv ffmpeg && \
              \
              echo '--- Building Package ---' && \
              cd /ws && \
              # makepkg needs to run as a non-root user. We'll create one.
              useradd builder -m && \
              chown -R builder:builder /ws && \
              # Run makepkg as the 'builder' user
              sudo -u builder makepkg -s --noconfirm && \
              \
              echo '--- Preparing Artifacts ---' && \
              mkdir -p /ws/artifacts && \
              # Move the final package to the artifacts directory
              mv *.pkg.tar.zst /ws/artifacts/ \
            "
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages-arch-${{ matrix.arch }}
          path: artifacts

  # JOB 4: CREATE RELEASE (Updated to include new Arch packages)
  release:
    name: Create Release
    needs: [build_x86_64, build_aarch64, build_arch] # Add the new build_arch job
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/packages-x86_64/*
            artifacts/packages-aarch64/*
            artifacts/packages-arch-x86_64/*
            artifacts/packages-arch-aarch64/*
