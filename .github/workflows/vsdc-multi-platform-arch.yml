# .github/workflows/vsdc-multi-platform-arch.yml
name: VSDC Linux Multi-Platform Release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

jobs:
  # JOB 1: NATIVE x86_64 BUILD (All 5 package types)
  build_x86_64:
    name: Build & Package for x86_64
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Define Paths
        id: dirs
        run: |
          echo "build-dir=${{ github.workspace }}/build-x86_64" >> "$GITHUB_OUTPUT"
          echo "package-dir=${{ github.workspace }}/packages-x86_64" >> "$GITHUB_OUTPUT"
          mkdir -p ${{ steps.dirs.outputs.package-dir }}
      - name: Install Dependencies
        run: sudo apt-get update && sudo apt-get install -y --no-install-recommends build-essential cmake pkg-config rpm libfuse2 libgl-dev qt6-base-dev libopencv-dev libavformat-dev libavcodec-dev libavutil-dev libswscale-dev
      - name: Configure and Build
        run: |
          cmake -S QtProject_Linux -B ${{ steps.dirs.outputs.build-dir }} -DCMAKE_BUILD_TYPE=Release -DCPACK_OUTPUT_FILE_PREFIX=${{ steps.dirs.outputs.package-dir }}
          cmake --build ${{ steps.dirs.outputs.build-dir }}
      - name: 1. Generate DEB and RPM
        run: cpack --config ${{ steps.dirs.outputs.build-dir }}/CPackConfig.cmake
      - name: Copy Assets for AppImage/Portable
        run: |
          cp QtProject_Linux/usr/share/applications/video-simili-duplicate-cleaner.desktop ${{ steps.dirs.outputs.build-dir }}/
          cp QtProject_Linux/usr/share/icons/hicolor/256x256/apps/video-simili-duplicate-cleaner.png ${{ steps.dirs.outputs.build-dir }}/
      - name: 2. Generate AppImage & 3. Portable Archive
        run: |
          wget -q https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage
          chmod a+x linuxdeployqt-continuous-x86_64.AppImage
          ./linuxdeployqt-continuous-x86_64.AppImage ${{ steps.dirs.outputs.build-dir }}/video-simili-duplicate-cleaner -appimage -qmake=/usr/lib/qt6/bin/qmake
          mv Video_Simili_Duplicate_Cleaner-*.AppImage ${{ steps.dirs.outputs.package-dir }}/
          ./linuxdeployqt-continuous-x86_64.AppImage ${{ steps.dirs.outputs.build-dir }}/video-simili-duplicate-cleaner -bundle-non-qt-libs
          mv Video_Simili_Duplicate_Cleaner-*-x86_64.tar.gz ${{ steps.dirs.outputs.package-dir }}/
      - name: 4. Generate Arch Package (x86_64)
        run: |
          docker run --rm -v ${{ github.workspace }}:/ws:rw --platform linux/amd64 archlinux:latest /bin/bash -c "
            set -e
            pacman-key --init && pacman-key --populate
            pacman -Syu --noconfirm --needed base-devel cmake git qt6-base opencv ffmpeg
            cd /ws/QtProject_Linux
            useradd builder -m && chown -R builder:builder /ws
            sudo -u builder makepkg -sf --noconfirm
            find . -maxdepth 1 -name '*.pkg.tar.zst' -exec mv {} /ws/packages-x86_64/ \;
          "
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with: { name: packages-x86_64, path: ${{ steps.dirs.outputs.package-dir }} }

  # JOB 2: AARCH64 BUILD (All 5 package types, using pre-built container)
  build_aarch64:
    name: Build & Package for aarch64
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with: { registry: ghcr.io, username: ${{ github.repository_owner }}, password: ${{ secrets.GITHUB_TOKEN }} }
      - name: Build All aarch64 Packages
        run: |
          mkdir -p ${{ github.workspace }}/packages-aarch64
          # Use the pre-built image for speed
          IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/vsdc-archlinux-arm-builder:latest"
          docker pull $IMAGE_NAME
          docker run --rm -v ${{ github.workspace }}:/ws:rw --platform linux/arm64 $IMAGE_NAME /bin/bash -c "
            set -e
            # Build DEB/RPM/AppImage/Portable first by installing dependencies
            pacman -S --noconfirm --needed rpm libfuse2 # Install missing runtime deps for other formats

            # Configure and Build
            cmake -S /ws/QtProject_Linux -B /ws/build-aarch64 -DCMAKE_BUILD_TYPE=Release -DCPACK_OUTPUT_FILE_PREFIX=/ws/packages-aarch64
            cmake --build /ws/build-aarch64

            # 1. Generate DEB and RPM
            cpack --config /ws/build-aarch64/CPackConfig.cmake

            # 2. Generate Arch Package
            cd /ws/QtProject_Linux
            useradd builder -m && chown -R builder:builder /ws
            sudo -u builder makepkg -sf --noconfirm
            find . -maxdepth 1 -name '*.pkg.tar.zst' -exec mv {} /ws/packages-aarch64/ \;
          "
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with: { name: packages-aarch64, path: packages-aarch64 }

  # JOB 3: CREATE RELEASE
  release:
    name: Create Release
    needs: [build_x86_64, build_aarch64]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/download-artifact@v4
        with: { path: artifacts }
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with: { files: artifacts/*/* }
