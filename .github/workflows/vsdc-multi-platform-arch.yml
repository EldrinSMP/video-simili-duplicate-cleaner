# Workflow name
name: VSDC Linux Multi-Arch Build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build_and_package:
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64, aarch64]

    runs-on: ubuntu-22.04

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up QEMU for ARM emulation
      if: matrix.arch == 'aarch64'
      uses: docker/setup-qemu-action@v3

    # Download the deployment tool once at the beginning to a known path
    - name: Download linuxdeployqt
      run: |
        wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
        chmod a+x linuxdeployqt-continuous-x86_64.AppImage

    - name: Define Directory Paths
      id: dirs
      run: |
        echo "source-dir=${{ github.workspace }}/QtProject_Linux" >> "$GITHUB_OUTPUT"
        echo "build-dir=${{ github.workspace }}/QtProject_Linux/build/release" >> "$GITHUB_OUTPUT"
        echo "package-dir=${{ github.workspace }}/release-files" >> "$GITHUB_OUTPUT"

    - name: Install Dependencies
      run: |
        sudo apt-get update
        if [ "${{ matrix.arch }}" = "aarch64" ]; then
          # Add arm64 architecture and explicitly add the 'ports' repository
          sudo dpkg --add-architecture arm64
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy-updates main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy-security main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential cmake pkg-config rpm libfuse2 libgl-dev \
            g++-aarch64-linux-gnu \
            qt6-base-dev:arm64 libopencv-dev:arm64 libavformat-dev:arm64 \
            libavcodec-dev:arm64 libavutil-dev:arm64 libswscale-dev:arm64
        else
          # For x86_64, install native libraries
          sudo apt-get install -y --no-install-recommends \
            build-essential cmake pkg-config rpm libfuse2 libgl-dev \
            qt6-base-dev libopencv-dev libavformat-dev libavcodec-dev \
            libavutil-dev libswscale-dev
        fi

    - name: Create ARM64 Toolchain File
      if: matrix.arch == 'aarch64'
      run: |
        cat <<EOF > ${{ github.workspace }}/arm64.toolchain.cmake
        set(CMAKE_SYSTEM_NAME Linux)
        set(CMAKE_SYSTEM_PROCESSOR aarch64)
        set(CMAKE_C_COMPILER aarch64-linux-gnu-gcc)
        set(CMAKE_CXX_COMPILER aarch64-linux-gnu-g++)
        set(CMAKE_FIND_ROOT_PATH /usr/aarch64-linux-gnu)
        EOF

    - name: Configure CMake
      run: |
        CMAKE_ARGS="-DCMAKE_BUILD_TYPE=Release -DCPACK_OUTPUT_FILE_PREFIX=${{ steps.dirs.outputs.package-dir }}"
        if [ "${{ matrix.arch }}" = "aarch64" ]; then
          CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/arm64.toolchain.cmake"
        fi
        cmake -S ${{ steps.dirs.outputs.source-dir }} -B ${{ steps.dirs.outputs.build-dir }} $CMAKE_ARGS

    - name: Build Project
      run: cmake --build ${{ steps.dirs.outputs.build-dir }}

    - name: Generate DEB and RPM Packages
      working-directory: ${{ steps.dirs.outputs.build-dir }}
      run: cpack

    - name: Create Portable Bundle
      working-directory: ${{ steps.dirs.outputs.build-dir }}
      run: |
        # Use the absolute path to the downloaded tool
        ${{ github.workspace }}/linuxdeployqt-continuous-x86_64.AppImage \
          ./video-simili-duplicate-cleaner -bundle-non-qt-libs -qmake=/usr/lib/qt6/bin/qmake

    - name: Assemble Portable Directory and Archive
      working-directory: ${{ steps.dirs.outputs.build-dir }}
      run: |
        mkdir VSDC_Portable
        mv lib/ plugins/ doc/ qt.conf AppRun video-simili-duplicate-cleaner VSDC_Portable/
        VERSION=$(grep 'set(CPACK_PACKAGE_VERSION' ${{ steps.dirs.outputs.source-dir }}/CMakeLists.txt | sed -E 's/.*"(.+)".*/\1/')
        tar -czvf ${{ steps.dirs.outputs.package-dir }}/vsdc-portable-${VERSION}-${{ matrix.arch }}.tar.gz VSDC_Portable/

    - name: Copy Resources for AppImage
      run: |
        cp ${{ github.workspace }}/QtProject_Linux/usr/share/applications/video-simili-duplicate-cleaner.desktop ${{ steps.dirs.outputs.build-dir }}/VSDC_Portable/
        cp ${{ github.workspace }}/QtProject_Linux/usr/share/icons/hicolor/256x256/apps/video-simili-duplicate-cleaner.png ${{ steps.dirs.outputs.build-dir }}/VSDC_Portable/video-simili-duplicate-cleaner.png

    - name: Create AppImage
      working-directory: ${{ steps.dirs.outputs.build-dir }}
      run: |
        # Use the absolute path to the downloaded tool
        ${{ github.workspace }}/linuxdeployqt-continuous-x86_64.AppImage \
          ./VSDC_Portable/video-simili-duplicate-cleaner -appimage -qmake=/usr/lib/qt6/bin/qmake

    - name: Upload Packages to Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ${{ steps.dirs.outputs.package-dir }}/*.{deb,rpm,tar.gz}
          ${{ steps.dirs.outputs.build-dir }}/*.AppImage
